
name: CI/CD Pipeline

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: write

env:
  DOCKER_VOLUME_MOUNTS: >-
    -v $DOCKER_CACHE_DIR/.github-action-cache/control-dataset:/workdir/tests/data/control-dataset
    -v $DOCKER_CACHE_DIR/.github-action-cache/mimiciii-demo:/workdir/tests/data/mimiciii-demo
    -v $DOCKER_CACHE_DIR/.github-action-cache/semitemp:/workdir/tests/data/semitemp
    -v $DOCKER_CACHE_DIR/.github-action-cache/bash-results:/workdir/tests/data/bash-results
    -v $DOCKER_CACHE_DIR/.github-action-cache/pytest-results:/workdir/tests/data/pytest-results
  CONTAINER_PYTEST_RESULTS: /workdir/tests/data/pytest-results/${GITHUB_SHA}
  CONTAINER_BASH_RESULTS: /workdir/tests/data/bash-results/${GITHUB_SHA}

jobs:
  build-and-push:
    # |-> 1. pull code
    # |-> 2. set up docker buildx 
    # |-> 3. login to docker hub
    # |-> 4. setup cache dir
    # |      - ?=self-hosted
    # |-> 5. extract branch name
    # |-> 6. setup cache on runner machine
    # |      - ?=self-hosted|github-hosted
    # |-> 7. build and export docker image
    # |      - ?=self-hosted|github-hosted
    # |-> 8. push the image
    # |-> 9. move cache
    # '-> 10. scan image for vulnerabilities
    runs-on: self-hosted # -> ubuntu-latest to run in github cloud
    outputs:
      branch_name: ${{ steps.get_branch.outputs.branch_name }}
      docker_image_tar: ${{ steps.get_branch.outputs.docker_image_tar }}
    steps:
      # => 1. Pull code into runner env
      - name: Checkout code
        uses: actions/checkout@v4

      # => 2. Set up Docker Buildx step
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # => 3. Login to docker hub to push images
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          # Secrets stored in repository
          username: tensorpod
          password: ${{ secrets.DOCKER_PASSWORD }}

      # => 4. Create cache directory if runing locally
      - name: Set up Docker cache/output directory on self-hosted
        if: runner.environment == 'self-hosted'
        run: |
          echo cache dir is: $DOCKER_CACHE_DIR
          
          if [ -n "$DOCKER_CACHE_DIR" ]; then
            echo "Using runner's DOCKER_CACHE_DIR: $DOCKER_CACHE_DIR"
          else
            DOCKER_CACHE_DIR="/tmp"
            echo "DOCKER_CACHE_DIR not set on runner. Using default: $DOCKER_CACHE_DIR"
          fi

          echo "DOCKER_CACHE_DIR=$DOCKER_CACHE_DIR" >> $GITHUB_ENV
          
          mkdir -p $DOCKER_CACHE_DIR
          mkdir -p $DOCKER_CACHE_DIR/.buildx-image-cache/tensorpod/pymimic3/

      # => 5. Extract branch name (may fail on pull requests, untested)
      - name: Extract branch name
        shell: bash
        id: get_branch
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          DOCKER_IMAGE_TAR=$DOCKER_CACHE_DIR/.buildx-image-cache/tensorpod/pymimic3/$BRANCH_NAME.tar
          echo "DOCKER_IMAGE_TAR=$DOCKER_IMAGE_TAR" >> $GITHUB_ENV
          echo "docker_image_tar=$DOCKER_IMAGE_TAR" >> $GITHUB_OUTPUT

          # Debug: verify outputs
          echo "Outputs set:"
          cat "$GITHUB_OUTPUT"

          docker run $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
            bash -ic "pytest --no-cleanup --junitxml=$CONTAINER_PYTEST_RESULTS/setup-fixture.xml \
             -v tests/test_zsetup_all_fixtures.py 2>&1 \
             | tee $CONTAINER_BASH_RESULTS/setup-fixture.txt"

          echo "Exit status: $?"
          if [ $? -ne 0 ]; then
            echo "The command failed."
            exit 1
          fi
          
          docker run $DOCKER_VOLUME_MOUNTS \
             tensorpod/pymimic3:$BRANCH_NAME \
             bash -ic "python -m tests.pytest_utils.reporting $CONTAINER_PYTEST_RESULTS/setup-fixture.xml"
             
          echo "$BASH_RESULTS/setup-fixture.txt"
          if [ ! -f "$BASH_RESULTS/setup-fixture.txt" ]; then
            echo "Log artifact not created."
            exit 1
          fi

          echo "$PYTEST_RESULTS/setup-fixture.xml"
          if [ ! -f "$PYTEST_RESULTS/setup-fixture.xml" ]; then
            echo "Pytest artifact not created."
            exit 1
          fi
      
# Pytest run test
  setup-control-dataset:
    runs-on: self-hosted
    needs: build-and-push
    env: 
      BRANCH_NAME: ${{ needs.build-and-push.outputs.branch_name }}
      DOCKER_IMAGE_TAR: ${{ needs.build-and-push.outputs.docker_image_tar }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup persistent test mounts
        shell: bash
        run: |
          mkdir -p $DOCKER_CACHE_DIR/.github-action-cache/{pytest-results,bash-results}

      - name: Load cached image
        shell: bash
        run: |
          echo "Loading cached image for testing: ${{ env.BRANCH_NAME}}"
          echo "Loading cached image for testing: $BRANCH_NAME"
          echo "Loading cached image for testing: ${{ env.DOCKER_IMAGE_TAR}}"
          echo "Loading cached image for testing: $DOCKER_IMAGE_TAR"
          echo "Loading cached image for testing: ${{ needs.build-and-push.outputs.docker_image_tar}}"
          docker load -i $DOCKER_IMAGE_TAR
          echo docker iamge ls -a
