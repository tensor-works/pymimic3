# CI/CD pipeline builds the Docker image and pushes it to the GitHub Container Registry
# Then it runs the Sphinx documentation build and deploys it to GitHub Pages
# Finally it tests the pymimic3 package
# -- DEBUG --
# Trigger: >git commit --allow-empty -m "Trigger pipeline" && git push

name: CI/CD Pipeline

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: write

env:
  CONTAINER_PYTEST_RESULTS: /workdir/tests/data/pytest-results/${{ github.sha }}
  CONTAINER_BASH_RESULTS: /workdir/tests/data/bash-results/${{ github.sha }}

jobs:
  build-and-push:
    # |-> 1. pull code
    # |-> 2. set up docker buildx 
    # |-> 3. login to docker hub
    # |-> 4. setup cache dir
    # |      - ?=self-hosted
    # |-> 5. extract branch name
    # |-> 6. setup cache on runner machine
    # |      - ?=self-hosted|github-hosted
    # |-> 7. build and export docker image
    # |      - ?=self-hosted|github-hosted
    # |-> 8. push the image
    # |-> 9. move cache
    # '-> 10. scan image for vulnerabilities
    runs-on: self-hosted # -> ubuntu-latest to run in github cloud
    outputs:
      branch_name: ${{ steps.get_branch.outputs.branch_name }}
      docker_image_tar: ${{ steps.get_branch.outputs.docker_image_tar }}
      docker_volumes: ${{ steps.get_volumes.outputs.docker_volumes }}
      bash_results: ${{ steps.get_volumes.outputs.bash_results }}
      pytest_results: ${{ steps.get_volumes.outputs.pytest_results }}
    steps:
      # => 1. Pull code into runner env
      - name: Checkout code
        uses: actions/checkout@v4

      # => 2. Set up Docker Buildx step
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # => 3. Login to docker hub to push images
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          # Secrets stored in repository
          username: tensorpod
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup volume mounts
        shell: bash
        id: get_volumes
        run: |
         DOCKER_VOLUME_MOUNTS="\
          -v $DOCKER_CACHE_DIR/.github-action-cache/control-dataset:/workdir/tests/data/control-dataset\
          -v $DOCKER_CACHE_DIR/.github-action-cache/mimiciii-demo:/workdir/tests/data/mimiciii-demo\
          -v $DOCKER_CACHE_DIR/.github-action-cache/semitemp:/workdir/tests/data/semitemp\
          -v $DOCKER_CACHE_DIR/.github-action-cache/bash-results:/workdir/tests/data/bash-results\
          -v $DOCKER_CACHE_DIR/.github-action-cache/pytest-results:/workdir/tests/data/pytest-results"
        
         echo "DOCKER_VOLUME_MOUNTS=$DOCKER_VOLUME_MOUNTS" >> $GITHUB_ENV
         echo "docker_volumes=$DOCKER_VOLUME_MOUNTS" >> $GITHUB_OUTPUT

         BASH_RESULTS=$DOCKER_CACHE_DIR/.github-action-cache/bash-results/${{ github.sha }}
         PYTEST_RESULTS=$DOCKER_CACHE_DIR/.github-action-cache/pytest-results/${{ github.sha }}

         echo "bash_results=$BASH_RESULTS" >> $GITHUB_OUTPUT
         echo "pytest_results=$PYTEST_RESULTS" >> $GITHUB_OUTPUT

      # => 4. Create cache directory if runing locally
      - name: Set up Docker cache/output directory on self-hosted
        if: runner.environment == 'self-hosted'
        run: |
          echo cache dir is: $DOCKER_CACHE_DIR
          
          if [ -n "$DOCKER_CACHE_DIR" ]; then
            echo "Using runner's DOCKER_CACHE_DIR: $DOCKER_CACHE_DIR"
          else
            DOCKER_CACHE_DIR="/tmp"
            echo "DOCKER_CACHE_DIR not set on runner. Using default: $DOCKER_CACHE_DIR"
          fi

          echo "DOCKER_CACHE_DIR=$DOCKER_CACHE_DIR" >> $GITHUB_ENV
          
          mkdir -p $DOCKER_CACHE_DIR
          mkdir -p $DOCKER_CACHE_DIR/.buildx-image-cache/tensorpod/pymimic3/

      # => 5. Extract branch name (may fail on pull requests, untested)
      - name: Extract branch name
        shell: bash
        id: get_branch
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          DOCKER_IMAGE_TAR=$DOCKER_CACHE_DIR/.buildx-image-cache/tensorpod/pymimic3/$BRANCH_NAME.tar
          echo "DOCKER_IMAGE_TAR=$DOCKER_IMAGE_TAR" >> $GITHUB_ENV
          echo "docker_image_tar=$DOCKER_IMAGE_TAR" >> $GITHUB_OUTPUT

          echo $DOCKER_VOLUME_MOUNTS
      
#      # => 6. Setup cache on runner machine: self-hosted
#      - name: Cache Docker layers on self-hosted
#        if: runner.environment == 'self-hosted'
#        uses: maxnowack/local-cache@v2
#        with: 
#          path: $DOCKER_CACHE_DIR/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-   
#      
#      # => 6. Setup cache on github cache: github hosted
#      - name: Cache Docker layers on github-hosted
#        if: runner.environment == 'github-hosted'
#        uses: actions/cache@v3
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-
#
#      # => 7. Build and push Docker image: self-hosted (part 1) 
#      - name: Build and export Docker image on self-hosted
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          file: .devcontainer/Dockerfile.ci
#          push: false
#          tags: |
#            tensorpod/pymimic3:latest
#            tensorpod/pymimic3:${{ env.BRANCH_NAME }}
#          cache-from: type=local,src=${{ env.DOCKER_CACHE_DIR }}/.buildx-cache
#          cache-to: type=local,dest=${{ env.DOCKER_CACHE_DIR }}/.buildx-cache-new,mode=max
#          outputs: type=docker,dest=${{ env.DOCKER_IMAGE_TAR }}
#
#      # => 7. Build and push Docker image: github hosted
#      - name: Build and export Docker image on github-hosted
#        if: runner.environment == 'github-hosted'
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          file: .devcontainer/Dockerfile.ci
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: |
#            tensorpod/pymimic3:latest
#            tensorpod/pymimic3:${{ env.BRANCH_NAME }}
#          cache-from: type=gha
#          cache-to: type=gha,mode=max
#          outputs: type=docker,dest=/tmp/.buildx-image-cache/tensorpod/pymimic3/${{ env.BRANCH_NAME }}.tar
#
#      - name: Upload artifact
#        if: runner.environment == 'github-hosted'
#        uses: actions/upload-artifact@v4
#        with:
#          name: pymimic3.$BRANCH_NAME
#          path: /tmp/.buildx-image-cache/tensorpod/pymimic3/${{ env.BRANCH_NAME }}.tar
#
#      # => 8. Push Docker image
#      # It seems the docker image is not automatically loaded after build
#      - name: Push Docker image
#        if: github.event_name != 'pull_request' && runner.environment == 'self-hosted'
#        run: |
#          docker load -i $DOCKER_IMAGE_TAR
#          docker push tensorpod/pymimic3:latest
#          docker push tensorpod/pymimic3:$BRANCH_NAME
#
#      # => 9. Move the cache with -new suffix to original cache
#      - name: Move cache
#        run: |
#          if [ "${{ runner.environment }}" = "self-hosted" ]; then
#            rm -rf $DOCKER_CACHE_DIR/.buildx-cache
#            mv $DOCKER_CACHE_DIR/.buildx-cache-new $DOCKER_CACHE_DIR/.buildx-cache
#          elif [ "${{ runner.environment }}" = "github-hosted" ]; then
#            rm -rf tmp/.buildx-cache
#            mv tmp/.buildx-cache-new tmp/.buildx-cache
#          fi
#
#      # => 10. Scan image for vulnerabilities
#      # - name: Scan image for vulnerabilities
      #   uses: anchore/scan-action@v3
      #   with:
      #     image: "tensorpod/pymimic3:$BRANCH_NAME"
      #     fail-build: false
      #     severity-cutoff: high
 # # Documentation build and deploy
 # docs:
 #   runs-on: self-hosted
 #   needs: build-and-push
 #   steps:
 #     - uses: actions/checkout@v4
 #     - uses: actions/setup-python@v5
 #     - name: Install dependencies
 #       run: |
 #         pip install sphinx sphinx_rtd_theme myst_parser
 #     - name: Sphinx build
 #       run: |
 #         sphinx-build doc _build
 #     - name: Deploy to GitHub Pages
 #       uses: peaceiris/actions-gh-pages@v3
 #       if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
 #       with:
 #         publish_branch: gh-pages
 #         github_token: ${{ secrets.GITHUB_TOKEN }}
 #         publish_dir: _build/
 #         force_orphan: true
#
# Pytest run test

  setup-control-dataset:
    runs-on: self-hosted
    needs: build-and-push
    env: 
      BRANCH_NAME: ${{ needs.build-and-push.outputs.branch_name }}
      DOCKER_IMAGE_TAR: ${{ needs.build-and-push.outputs.docker_image_tar }}
      DOCKER_VOLUME_MOUNTS: ${{ needs.build-and-push.outputs.docker_volumes }}
      BASH_RESULTS: ${{ needs.build-and-push.outputs.bash_results }}
      PYTEST_RESULTS: ${{ needs.build-and-push.outputs.pytest_results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup persistent test mounts
        shell: bash
        run: |
          mkdir -p $DOCKER_CACHE_DIR/.github-action-cache/{pytest-results/${{ github.sha }},bash-results/${{ github.sha }}}

      - name: Load cached image
        shell: bash
        run: |
          docker load -i $DOCKER_IMAGE_TAR
          echo docker iamge ls -a

      - name: Create output dirs
        run: |
          mkdir -p BASH_RESULTS
          mkdir -p PYTEST_RESULTS

      - name: Setup control dataset
        shell: bash
        run: |
          docker run $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
          bash -ic "cd etc && make testing=true 2>&1 \
          | tee $CONTAINER_BASH_RESULTS/setup-control-dataset.txt"
          
          echo "Exit status: $?"
          if [ $? -ne 0 ]; then
            echo "The command failed."
            exit 1
          fi

          if [ ! -f "$BASH_RESULTS/setup-control-dataset.txt" ]; then
            echo "Log artifact not created."
            exit 1
          fi


  setup-fixtures:
    needs: [build-and-push, setup-control-dataset]
    runs-on: self-hosted
    env: 
      BRANCH_NAME: ${{ needs.build-and-push.outputs.branch_name }}
      DOCKER_IMAGE_TAR: ${{ needs.build-and-push.outputs.docker_image_tar }}
      DOCKER_VOLUME_MOUNTS: ${{ needs.build-and-push.outputs.docker_volumes }}
      BASH_RESULTS: ${{ needs.build-and-push.outputs.bash_results }}
      PYTEST_RESULTS: ${{ needs.build-and-push.outputs.pytest_results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load cached image
        shell: bash
        run: |
          docker load -i $DOCKER_IMAGE_TAR
          echo "Loaded cached image for testing: $BRANCH_NAME"
          echo docker iamge ls -a

      - name: Run fixture setup tests
        shell: bash
        run: |      
          docker run $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
            bash -ic "pytest --no-cleanup --junitxml=$CONTAINER_PYTEST_RESULTS/setup-fixture.xml \
             -v tests/test_zsetup_all_fixtures.py 2>&1 \
             | tee $CONTAINER_BASH_RESULTS/setup-fixture.txt"

          echo "Exit status: $?"
          if [ $? -ne 0 ]; then
            echo "The command failed."
            exit 1
          fi
          
          docker run $DOCKER_VOLUME_MOUNTS \
             tensorpod/pymimic3:$BRANCH_NAME \
             bash -ic "python -m tests.pytest_utils.reporting $CONTAINER_PYTEST_RESULTS/setup-fixture.xml"
             
          echo "$BASH_RESULTS/setup-fixture.txt"
          if [ ! -f "$BASH_RESULTS/setup-fixture.txt" ]; then
            echo "Log artifact not created."
            exit 1
          fi

          echo "$PYTEST_RESULTS/setup-fixture.xml"
          if [ ! -f "$PYTEST_RESULTS/setup-fixture.xml" ]; then
            echo "Pytest artifact not created."
            exit 1
          fi

      - name: Run pytest suite tests
        shell: bash
        run: |
          docker run $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
            bash -ic "pytest --no-cleanup --junitxml=$CONTAINER_PYTEST_RESULTS/test-pytest-utils.xml \ 
            -v tests/test_pytest_utils.py 2>&1 \
            | tee $CONTAINER_BASH_RESULTS/test-pytest-utils.txt"

          echo "Exit status: $?"
          if [ $? -ne 0 ]; then
            echo "The command failed."
            exit 1
          fi

          docker run $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
            bash -ic "python -m tests.pytest_utils.reporting $CONTAINER_PYTEST_RESULTS/test-pytest-utils.xml\
            2>&1 | tee $CONTAINER_BASH_RESULTS/test-pytest-utils.txt"

          if [ ! -f "$BASH_RESULTS/test-pytest-utils.txt" ]; then
            echo "Log artifact not created."
            exit 1
          fi

          if [ ! -f "$PYTEST_RESULTS/test-pytest-utils.xml" ]; then
            echo "Pytest artifact not created."
            exit 1
          fi

#  test-datasets:
#    needs: [setup-fixtures, build-and-push]
#    runs-on: self-hosted
#    env: 
#      BRANCH_NAME: ${{ needs.build-and-push.outputs.branch_name }}
#      DOCKER_IMAGE_TAR: ${{ needs.build-and-push.outputs.docker_image_tar }}
#      DOCKER_VOLUME_MOUNTS: ${{ needs.build-and-push.outputs.docker_volumes }}
#      BASH_RESULTS: ${{ needs.build-and-push.outputs.bash_results }}
#      PYTEST_RESULTS: ${{ needs.build-and-push.outputs.pytest_results }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Load cached image
#        shell: bash
#        run: |
#          docker load -i $DOCKER_IMAGE_TAR
#          echo "Loaded cached image for testing: $BRANCH_NAME"
#          echo docker iamge ls -a
#
#      - name: Run dataset tests
#        shell: bash
#        run: |
#          docker run $DOCKER_VOLUME_MOUNTS \
#            tensorpod/pymimic3:$BRANCH_NAME \
#            bash -ic "pytest --no-cleanup --junitxml=$CONTAINER_PYTEST_RESULTS/test-dataset.xml\
#            -v tests/test_datasets 2>&1 | tee $CONTAINER_BASH_RESULTS\test-dataset.txt"
#            
#          # Doesn't fail for some reason
#          echo "Exit status: $?"
#          if [ $? -ne 0 ]; then
#            echo "The command failed."
#            exit 1
#          fi
#
#          docker run $DOCKER_VOLUME_MOUNTS \
#            tensorpod/pymimic3:$BRANCH_NAME \
#            bash -ic "python -m tests.pytest_utils.reporting $CONTAINER_PYTEST_RESULTS/test-dataset.xml\
#            2>&1 | tee $CONTAINER_BASH_RESULTS/test-dataset.txt"
#
#          echo "Exit status: $?"
#          if [ $? -ne 0 ]; then
#            echo "The command failed."
#            exit 1
#          fi
#
#          if [ ! -f "$BASH_RESULTS/test-dataset.txt" ]; then
#            echo "Log artifact not created."
#            exit 1
#          fi
#
#          if [ ! -f "$PYTEST_RESULTS/test-dataset.xml" ]; then
#            echo "Pytest artifact not created."
#            exit 1
#          fi

  test-preprocessing:
    needs: [setup-fixtures, build-and-push]
    runs-on: self-hosted
    env: 
      BRANCH_NAME: ${{ needs.build-and-push.outputs.branch_name }}
      DOCKER_IMAGE_TAR: ${{ needs.build-and-push.outputs.docker_image_tar }}
      DOCKER_VOLUME_MOUNTS: ${{ needs.build-and-push.outputs.docker_volumes }}
      BASH_RESULTS: ${{ needs.build-and-push.outputs.bash_results }}
      PYTEST_RESULTS: ${{ needs.build-and-push.outputs.pytest_results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load cached image
        shell: bash
        run: |
          docker load -i $DOCKER_IMAGE_TAR
          echo "Loaded cached image for testing: $BRANCH_NAME"
          echo docker iamge ls -a

      - name: Run preprocessing tests
        shell: bash
        run: |
          docker run $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
            bash -ic "pytest --no-cleanup --junitxml=$CONTAINER_PYTEST_RESULTS/test-preprocessing.xml\
            -v tests/test_preprocessing 2>&1 | tee $CONTAINER_BASH_RESULTS/test-preprocessing.txt"

          echo "Exit status: $?"
          if [ $? -ne 0 ]; then
            echo "The command failed."
            exit 1
          fi
            
          docker run $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
            bash -ic "python -m tests.pytest_utils.reporting $CONTAINER_PYTEST_RESULTS/test-preprocessing.xml\
            2>&1 | tee $CONTAINER_BASH_RESULTS/test-preprocessing.txt"


          if [ ! -f "$BASH_RESULTS/test-preprocessing.txt" ]; then
            echo "Log artifact not created."
            exit 1
          fi

          if [ ! -f "$PYTEST_RESULTS/test-preprocessing.xml" ]; then
            echo "Pytest artifact not created."
            exit 1
          fi

  test-metrics:
    needs: [setup-fixtures, build-and-push]
    runs-on: self-hosted
    env: 
      BRANCH_NAME: ${{ needs.build-and-push.outputs.branch_name }}
      DOCKER_IMAGE_TAR: ${{ needs.build-and-push.outputs.docker_image_tar }}
      DOCKER_VOLUME_MOUNTS: ${{ needs.build-and-push.outputs.docker_volumes }}
      BASH_RESULTS: ${{ needs.build-and-push.outputs.bash_results }}
      PYTEST_RESULTS: ${{ needs.build-and-push.outputs.pytest_results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load cached image
        shell: bash
        run: |
          docker load -i $DOCKER_IMAGE_TAR
          echo "Loaded cached image for testing: $BRANCH_NAME"
          echo docker iamge ls -a

      - name: Run metrics tests
        shell: bash
        run: |
          set -x
          set -o pipefail       

          docker run --rm $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
            bash -ic "pytest --no-cleanup --junitxml=$CONTAINER_PYTEST_RESULTS/test-metrics.xml\ 
            -v tests/test_metrics 2>&1 | tee $CONTAINER_BASH_RESULTS/test-metrics.txt"
          
          # Capture and display all relevant status information
          docker_status=${PIPESTATUS[0]}
          tee_status=${PIPESTATUS[1]}
          last_status=$?
          
          exit $docker_status

          echo "Pipe status: ${PIPESTATUS[0]}"
          echo "Exit status: $?"
          if [ $? -ne 0 ]; then
            echo "The command failed."
            exit 1
          fi

          docker run $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
            bash -ic "python -m tests.pytest_utils.reporting $CONTAINER_PYTEST_RESULTS/test-metrics.xml\
            2>&1 | tee $CONTAINER_BASH_RESULTS/test-metrics.txt"

          echo "Exit status: $?"
          if [ $? -ne 0 ]; then
            echo "The command failed."
            exit 1
          fi

          if [ ! -f "$BASH_RESULTS/test-metrics.txt" ]; then
            echo "Log artifact not created."
            exit 1
          fi

          if [ ! -f "$PYTEST_RESULTS/test-metrics.xml" ]; then
            echo "Pytest artifact not created."
            exit 1
          fi

  test-models:
    needs: [build-and-push, test-metrics] # test-datasets, test-preprocessing]
    runs-on: self-hosted
    env: 
      BRANCH_NAME: ${{ needs.build-and-push.outputs.branch_name }}
      DOCKER_IMAGE_TAR: ${{ needs.build-and-push.outputs.docker_image_tar }}
      DOCKER_VOLUME_MOUNTS: ${{ needs.build-and-push.outputs.docker_volumes }}
      BASH_RESULTS: ${{ needs.build-and-push.outputs.bash_results }}
      PYTEST_RESULTS: ${{ needs.build-and-push.outputs.pytest_results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load cached image
        shell: bash
        run: |
          docker load -i $DOCKER_IMAGE_TAR
          echo "Loaded cached image for testing: $BRANCH_NAME"
          echo docker iamge ls -a

      - name: Run model tests
        shell: bash
        run: |
          docker run $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
            pytest --no-cleanup --junitxml=$CONTAINER_PYTEST_RESULTS/test-models.xml\
            -v tests/test_models 2>&1 | tee $CONTAINER_BASH_RESULTS/test-models.txt

          echo "Exit status: $?"
          if [ $? -ne 0 ]; then
            echo "The command failed."
            exit 1
          fi

          docker run $DOCKER_VOLUME_MOUNTS \
            tensorpod/pymimic3:$BRANCH_NAME \
            bash -ic "python -m tests.pytest_utils.reporting $CONTAINER_PYTEST_RESULTS/test-models.xml\
            2>&1 | tee $CONTAINER_BASH_RESULTS/test-models.txt"

          if [ ! -f "$BASH_RESULTS/test-models.txt" ]; then
            echo "Log artifact not created."
            exit 1
          fi

          if [ ! -f "$PYTEST_RESULTS/test-models.xml" ]; then
            echo "Pytest artifact not created."
            exit 1
          fi

      - name: Cleanup semitemp directory
        if: always()
        shell: bash
        run: |
          rm -rf $DOCKER_CACHE_DIR/.github-action-cache/semitemp 2>&1 \
          | tee $BASH_RESULTS/cleanup-semitemp.txt

          echo "Exit status: $?"
          if [ $? -ne 0 ]; then
            echo "The command failed."
            exit 1
          fi